"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
document.addEventListener('DOMContentLoaded', function () {
  // height (100vh) fix for IOS
  var vh = window.innerHeight * 0.01;
  document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));

  // resize
  window.addEventListener('resize', function () {
    var vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
  });

  // checker
  var useItemChecker = function useItemChecker(els, onClickOutside) {
    var checkBodyClick = function checkBodyClick(e) {
      var currentEl = e.target;
      while (currentEl) {
        if (els.includes(currentEl)) break;
        currentEl = currentEl.parentNode;
      }
      if (!currentEl) {
        onClickOutside();
        removeBodyChecker();
      }
    };
    function setBodyChecker() {
      document.documentElement.addEventListener('click', checkBodyClick);
    }
    function removeBodyChecker() {
      document.documentElement.removeEventListener('click', checkBodyClick);
    }
    return {
      setBodyChecker: setBodyChecker,
      removeBodyChecker: removeBodyChecker
    };
  };

  // slides up/down/toggle
  var slideUpQna = function slideUpQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    target.style.transitionProperty = 'height, margin, padding';
    target.style.transitionDuration = duration + 'ms';
    target.style.height = target.offsetHeight + 'px';
    target.offsetHeight;
    target.style.overflow = 'hidden';
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    target.previousElementSibling.style.pointerEvents = 'none';
    window.setTimeout(function () {
      target.style.display = 'none';
      target.style.removeProperty('height');
      target.style.removeProperty('padding-top');
      target.style.removeProperty('padding-bottom');
      target.style.removeProperty('margin-top');
      target.style.removeProperty('margin-bottom');
      target.style.removeProperty('overflow');
      target.style.removeProperty('transition-duration');
      target.style.removeProperty('transition-property');
      target.previousElementSibling.style.pointerEvents = 'auto';
    }, duration);
    target.parentNode.classList.remove('is--open');
  };
  var slideDownQna = function slideDownQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    target.style.removeProperty('display');
    var display = window.getComputedStyle(target).display;
    if (display === 'none') display = 'block';
    target.style.display = display;
    var height = target.offsetHeight;
    target.style.overflow = 'hidden';
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    target.offsetHeight;
    target.style.transitionProperty = "height, margin, padding";
    target.style.transitionDuration = duration + 'ms';
    target.style.height = height + 'px';
    target.style.removeProperty('padding-top');
    target.style.removeProperty('padding-bottom');
    target.style.removeProperty('margin-top');
    target.style.removeProperty('margin-bottom');
    target.previousElementSibling.style.pointerEvents = 'none';
    window.setTimeout(function () {
      target.style.removeProperty('height');
      target.style.removeProperty('overflow');
      target.style.removeProperty('transition-duration');
      target.style.removeProperty('transition-property');
      target.previousElementSibling.style.pointerEvents = 'auto';
    }, duration);
    target.parentNode.classList.add('is--open');
  };
  var slideToggleQna = function slideToggleQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    if (window.getComputedStyle(target).display === 'none') {
      return slideDownQna(target, duration);
    } else {
      return slideUpQna(target, duration);
    }
  };

  // tabs
  var tabsItems = document.querySelectorAll('.tabs__item');
  var notificationTabsItems = document.querySelectorAll('.c-notification__tabs-item');
  if (tabsItems) {
    tabsItems.forEach(function (item, i) {
      item.addEventListener('click', function () {
        var parent = item.closest('.tabs');
        parent.querySelectorAll('.tabs__item').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        parent.querySelectorAll('.tabs__wrapper').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        item.classList.add('is--active');
        var el = parent.querySelector('.tabs__item.is--active');
        var index = _toConsumableArray(parent.querySelectorAll('.tabs__item')).indexOf(el);
        parent.querySelectorAll('.tabs__wrapper')[index].classList.add('is--active');
      });
    });
  }
  if (notificationTabsItems) {
    notificationTabsItems.forEach(function (item, i) {
      item.addEventListener('click', function () {
        var parent = item.closest('.c-notification__tabs');
        parent.querySelectorAll('.c-notification__tabs-item').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        parent.querySelectorAll('.c-notification__tabs-wrapper').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        item.classList.add('is--active');
        var el = parent.querySelector('.c-notification__tabs-item.is--active');
        var index = _toConsumableArray(parent.querySelectorAll('.c-notification__tabs-item')).indexOf(el);
        parent.querySelectorAll('.c-notification__tabs-wrapper')[index].classList.add('is--active');
      });
    });
  }

  // accordeon
  var accordeonTrigger = document.querySelectorAll('.c-accordeon__trigger');
  if (accordeonTrigger) {
    accordeonTrigger.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (!item.parentNode.classList.contains('is--open')) {
          slideDownQna(item.nextElementSibling);
        } else {
          slideUpQna(item.nextElementSibling);
        }
      });
    });
  }

  // nav dropdown
  var navTrigger = document.querySelectorAll('.nav__trigger > .nav__link');
  if (navTrigger) {
    navTrigger.forEach(function (item) {
      var close = function close() {
        var parent = item.closest('.nav__trigger');
        parent.classList.remove('is--active');
      };
      var itemChecker = useItemChecker([item.parentNode], close);
      item.addEventListener('click', function (event) {
        event.preventDefault();
        var parent = item.closest('.nav__trigger');
        if (!parent.classList.contains('is--active')) {
          parent.classList.add('is--active');
          itemChecker.setBodyChecker();
        } else {
          close();
        }
      });
    });
  }

  // menu
  var header = document.getElementById('header');
  var hamburger = document.getElementById('hamburger-toggle');
  var menu = document.getElementById('c-menu');
  var menuTrigger = document.querySelectorAll('.c-menu__link-trigger > .c-menu__link');
  if (header && hamburger && menu) {
    hamburger.addEventListener('click', function (event) {
      event.preventDefault();
      var close = function close() {
        header.classList.remove('menu--active');
        menu.classList.remove('is--active');
      };
      var itemChecker = useItemChecker([hamburger.parentNode], close);
      if (!menu.classList.contains('is--active')) {
        header.classList.add('menu--active');
        menu.classList.add('is--active');
        itemChecker.setBodyChecker();
      } else {
        close();
      }
    });
    if (menuTrigger) {
      menuTrigger.forEach(function (item) {
        item.addEventListener('click', function (event) {
          event.preventDefault();
          if (!item.parentNode.classList.contains('is--open')) {
            slideDownQna(item.nextElementSibling);
          } else {
            slideUpQna(item.nextElementSibling);
          }
        });
      });
    }
  }

  // notification dropdown
  var notificationWrapper = document.getElementById('c-notification');
  var notificationTrigger = document.getElementById('c-notification-trigger');
  if (notificationTrigger && notificationWrapper) {
    notificationTrigger.addEventListener('click', function (event) {
      event.preventDefault();
      var close = function close() {
        notificationWrapper.classList.remove('is--active');
      };
      var itemChecker = useItemChecker([notificationTrigger.parentNode], close);
      if (!notificationWrapper.classList.contains('is--active')) {
        notificationWrapper.classList.add('is--active');
        itemChecker.setBodyChecker();
      } else {
        close();
      }
    });
  }

  // user dropdown
  var userWrapper = document.getElementById('c-user');
  var userTrigger = document.getElementById('c-user-trigger');
  if (userTrigger && userWrapper) {
    userTrigger.addEventListener('click', function (event) {
      event.preventDefault();
      var close = function close() {
        userWrapper.classList.remove('is--active');
      };
      var itemChecker = useItemChecker([userTrigger.parentNode], close);
      if (!userWrapper.classList.contains('is--active')) {
        userWrapper.classList.add('is--active');
        itemChecker.setBodyChecker();
      } else {
        close();
      }
    });
  }
});